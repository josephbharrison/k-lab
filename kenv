#!/usr/bin/env bash
#
# REQUIRES: gnu-getopt
#

# Source core functions from lib/core.sh
source lib/core.sh

[[ ! -f .env.local ]] && touch .env.local

GIT_URL='github.com/josephbharrison/k-lab'

# [[ $(uname -a | grep -c "Darwin.*arm64") -gt 0 ]] && export DOCKER_DEFAULT_PLATFORM=linux/amd64
[[ $(uname -a | grep -c "Darwin.*arm64") -gt 0 ]] && export DOCKER_DEFAULT_PLATFORM=linux/aarch64

# setup python virtual env
declare platform

function set_example(){
    example=$1
    [[ ! -d examples/${example} ]] && usage 1 "example '${example}' not found"
    cp -f "examples/${example}/app.py" "${PROJECT_DIR}/app.py"
    [[ -d examples/${example}/charts ]] && \
        rm -rf ${PROJECT_DIR}/charts && \
        cp -r examples/${example}/charts charts/
    cp -f "examples/${example}/requirements.txt" "${PROJECT_DIR}/requirements.txt"
    if [[ -f "examples/${example}/compose" ]];then
    rm -rf ${PROJECT_DIR}/docker-compose
        mkdir ${PROJECT_DIR}/docker-compose
        while read -r dc
        do
            cp -r ${PROJECT_DIR}/.compose/${dc} ${PROJECT_DIR}/docker-compose/${dc}
        done < examples/${example}/compose
    fi
}

function set_mode(){
    mode=$1
    case "${mode}" in
        local)  replace '.env.local' '^# \([A-Z_]*=\)' '\1';
                replace '.env.local' '^# APP_\([A-Z]*=\)' 'APP_\1';
                replace '.env.local' '^# CONSUMER_\([A-Z]*=\)' 'CONSUMER_\1';;
        docker) replace '.env.local' '^\([A-Z_]*=\)' '# \1';
                replace '.env.local' '^# APP_\([A-Z]*=\)' 'APP_\1';
                replace '.env.local' '^# CONSUMER_\([A-Z]*=\)' 'CONSUMER_\1';;
    esac
}

function usage(){
    status=$1
    msg=$2
    [[ -z "${status}" ]] && status=1
    [[ -n "${msg}" ]] && echo "Response: ${msg}"
    CMD_HEADER='
Usage:
  kenv <command> [opts]'
    echo -e "${CMD_HEADER}"
    usage_footer
    exit $status
}

function cook(){
    recipe=$1
    if [[ -d "recipes/${recipe}" ]]; then
        cp -r "recipes/${recipe}/." .
    else
        echo "Recipe ${recipe} not found"
        return 1
    fi
}

declare HELP VERBOSE OP EXAMPLE PY_VERSION DOCKER_DEFAULT_PLATFORM
function set_opts(){

    case "$1" in
        up)             export OP='up'; shift 1;;
        clean)          export OP='clean'; shift 1;;
        down)           export OP='down'; shift 1;;
        build)          export OP='build'; shift 1;;
        prep)           export OP='prep'; shift 1;;
        recipe)         export OP='recipe'; shift 1;;
    esac

    OPTS=$(getopt \
        -o hve:t:p:m:r: \
        -l verbose,environment:,tag:,project:,mode:,recipe: \
        -n 'env' -- "$@")

    if [ $? != 0 ];then
        usage 1 >&2
        exit 1
    fi

    eval set -- "${OPTS}"
    while true; do
        case "$1" in
            -h|--help)             export HELP=true; shift 1; usage 0;;
            -v|--verbose)          export VERBOSE=true; shift 1;;
            -m|--mode)             export MODE=$2; shift 2;;
            -e|--example)          export EXAMPLE=$2; shift 2;;
            -t|--tag)              export PY_VERSION=$2; shift 2;;
            -r|--recipe)           export RECIPE=$2; shift 2;;
            --) shift 1; break;;
            *) usage 1; break;;
        esac
    done
}

PROJECT_DIR=$(pwd)
PROJECT=${PWD##*/}
export PROJECT_DIR PROJECT

[[ -z "${HELP}" ]] && HELP=false
[[ -z "${VERBOSE}" ]] && VERBOSE=false
[[ -z "${PY_VERSION}" ]] && PY_VERSION="3.8.5"
[[ -z "${PY_VERSION_SHORT}" ]] && PY_VERSION_SHORT=${PY_VERSION:0:3}
[[ -z "${MODE}" ]] && MODE="local"

set_opts "$@"

[[ -n "${EXAMPLE}" ]] && set_example "${EXAMPLE}"
[[ -n "${MODE}" && -f .env.local ]] && set_mode "${MODE}"

# report results
if [[ -n ${OP} ]];then
    if [[ ${OP} == "prep" ]];then
        report "$(git_ignore)"
        report "$(setup_venv ${OP})"
        report "$(install_pip ${OP})"
        report "$(install_dc ${OP})"
        report "$(install_req ${OP})"
    fi

    if [[ ${OP} != "prep" ]];then
        report "$(composer ${OP})"
        [[ -f .env.local ]] && report "$(create_env_file)"
        report "$(compose_local ${OP})"
    fi

    if [[ ${OP} == "recipe" ]];then
        report "$(cook ${RECIPE})"
    fi
fi
report "$(update_hosts)"
report "$(set_aliases)"

exit 0
